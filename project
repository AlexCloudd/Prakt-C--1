using System;
using System.IO;

namespace LibraryApp
{
    public class User
    {
        public string Name { get; set; }
        public string[] BorrowedBooks { get; set; }

        public User(string name)
        {
            Name = name;
            BorrowedBooks = new string[0];
        }

        public virtual void ShowMenu()
        {
            Console.WriteLine("Меню пользователя:");
            Console.WriteLine("1. Просмотреть доступные книги");
            Console.WriteLine("2. Взять книгу");
            Console.WriteLine("3. Вернуть книгу");
            Console.WriteLine("4. Просмотреть список взятых книг");
            Console.WriteLine("5. Выйти");
        }
    }

    public class Librarian : User
    {
        public Librarian(string name) : base(name) { }

        public override void ShowMenu()
        {
            Console.WriteLine("Меню библиотекаря:");
            Console.WriteLine("1. Добавить новую книгу");
            Console.WriteLine("2. Удалить книгу из системы");
            Console.WriteLine("3. Зарегистрировать нового пользователя");
            Console.WriteLine("4. Просмотреть список всех пользователей");
            Console.WriteLine("5. Просмотреть список всех книг");
            Console.WriteLine("6. Выйти");
        }
    }

    public class Book
    {
        public string Title { get; set; }
        public string Author { get; set; }
        public bool IsAvailable { get; set; }

        public Book(string title, string author)
        {
            Title = title;
            Author = author;
            IsAvailable = true;
        }

        public override string ToString()
        {
            return $"{Title} ({Author}) - {(IsAvailable ? "Доступна" : "Выдана")}";
        }
    }

    public class Library
    {
        private Book[] books;
        private User[] users;

        public Library()
        {
            books = new Book[0];
            users = new User[0];
        }

        public void LoadData()
        {
            try
            {
                if (File.Exists("books.txt"))
                {
                    foreach (var line in File.ReadAllLines("books.txt"))
                    {
                        var parts = line.Split('|');
                        if (parts.Length == 3)
                        {
                            string title = parts[0].Trim();
                            string author = parts[1].Trim();
                            bool isAvailable = bool.Parse(parts[2].Trim());

                            AddBook(title, author, isAvailable);
                        }
                        else
                        {
                            Console.WriteLine($"Неверный формат данных в файле books.txt: {line}");
                        }
                    }
                }

                if (File.Exists("users.txt"))
                {
                    foreach (var line in File.ReadAllLines("users.txt"))
                    {
                        var parts = line.Split('|');
                        if (parts.Length > 0)
                        {
                            string userName = parts[0].Trim();
                            var user = new User(userName);

                            if (parts.Length > 1)
                            {
                                var borrowedBooks = parts[1].Split(',');
                                user.BorrowedBooks = borrowedBooks;
                            }

                            Array.Resize(ref users, users.Length + 1);
                            users[users.Length - 1] = user;
                        }
                        else
                        {
                            Console.WriteLine($"Неверный формат данных в файле users.txt: {line}");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при загрузке данных: {ex.Message}");
            }
        }

        public void SaveData()
        {
            try
            {
                var bookLines = new string[books.Length];
                for (int i = 0; i < books.Length; i++)
                {
                    bookLines[i] = $"{books[i].Title}|{books[i].Author}|{books[i].IsAvailable}";
                }
                File.WriteAllLines("books.txt", bookLines);

                var userLines = new string[users.Length];
                for (int i = 0; i < users.Length; i++)
                {
                    userLines[i] = $"{users[i].Name}|{string.Join(",", users[i].BorrowedBooks)}";
                }
                File.WriteAllLines("users.txt", userLines);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка при сохранении данных: {ex.Message}");
            }
        }

        public void AddBook(string title, string author, bool isAvailable = true)
        {
            Array.Resize(ref books, books.Length + 1);
            books[books.Length - 1] = new Book(title, author) { IsAvailable = isAvailable };
        }

        public void RemoveBook(string title)
        {
            books = Array.FindAll(books, b => b.Title != title);
        }

        public Book[] GetAvailableBooks()
        {
            return Array.FindAll(books, b => b.IsAvailable);
        }

        public Book[] GetAllBooks()
        {
            return books;
        }

        public void BorrowBook(string title, User user)
        {
            var book = Array.Find(books, b => b.Title == title);
            if (book != null && book.IsAvailable)
            {
                book.IsAvailable = false;

                string[] newBorrowedBooks = new string[user.BorrowedBooks.Length + 1];
                Array.Copy(user.BorrowedBooks, newBorrowedBooks, user.BorrowedBooks.Length);
                newBorrowedBooks[newBorrowedBooks.Length - 1] = book.Title;
                user.BorrowedBooks = newBorrowedBooks;

                Console.WriteLine($"Книга '{book.Title}' успешно взята.");
            }
            else
            {
                Console.WriteLine("Книга недоступна.");
            }
        }

        public void ReturnBook(string title, User user)
        {
            var book = Array.Find(books, b => b.Title == title);
            if (book != null && Array.Exists(user.BorrowedBooks, b => b == title))
            {
                book.IsAvailable = true;

                user.BorrowedBooks = Array.FindAll(user.BorrowedBooks, b => b != title);

                Console.WriteLine($"Книга '{book.Title}' успешно возвращена.");
            }
            else
            {
                Console.WriteLine("Ошибка возврата книги.");
            }
        }

        public void AddUser(string name)
        {
            Array.Resize(ref users, users.Length + 1);
            users[users.Length - 1] = new User(name);
        }

        public User[] GetAllUsers()
        {
            return users;
        }

        public bool IsUserRegistered(string name)
        {
            return Array.Exists(users, u => u.Name == name);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Library library = new Library();
            library.LoadData();

            string librarianName = "Admin";

            Librarian librarian = new Librarian(librarianName);

            Console.WriteLine("Выберите роль:");
            Console.WriteLine("1. Библиотекарь");
            Console.WriteLine("2. Пользователь");
            int roleChoice = int.Parse(Console.ReadLine());

            User currentUser = null;

            if (roleChoice == 1)
            {
                currentUser = librarian;
            }
            else if (roleChoice == 2)
            {
                Console.Write("Введите ваше имя: ");
                string userName = Console.ReadLine();

                if (library.IsUserRegistered(userName))
                {
                    currentUser = new User(userName);
                }
                else
                {
                    Console.WriteLine("Пользователь с таким именем не зарегистрирован.");
                    return;
                }
            }
            else
            {
                Console.WriteLine("Неверный выбор.");
                return;
            }

            while (true)
            {
                currentUser.ShowMenu();
                int choice = int.Parse(Console.ReadLine());

                if (currentUser is Librarian librarianInstance)
                {
                    switch (choice)
                    {
                        case 1:
                            Console.Write("Введите название книги: ");
                            string title = Console.ReadLine();
                            Console.Write("Введите автора книги: ");
                            string author = Console.ReadLine();
                            library.AddBook(title, author);
                            break;
                        case 2:
                            Console.Write("Введите название книги для удаления: ");
                            string removeTitle = Console.ReadLine();
                            library.RemoveBook(removeTitle);
                            break;
                        case 3:
                            Console.Write("Введите имя нового пользователя: ");
                            string newUserName = Console.ReadLine();
                            library.AddUser(newUserName);
                            break;
                        case 4:
                            foreach (var user in library.GetAllUsers())
                            {
                                Console.WriteLine(user.Name);
                            }
                            break;
                        case 5:
                            foreach (var book in library.GetAllBooks())
                            {
                                Console.WriteLine(book);
                            }
                            break;
                        case 6:
                            library.SaveData();
                            return;
                        default:
                            Console.WriteLine("Неверный выбор.");
                            break;
                    }
                }
                else
                {
                    switch (choice)
                    {
                        case 1:
                            foreach (var book in library.GetAvailableBooks())
                            {
                                Console.WriteLine(book);
                            }
                            break;
                        case 2:
                            Console.Write("Введите название книги для взятия: ");
                            string borrowTitle = Console.ReadLine();
                            library.BorrowBook(borrowTitle, currentUser);
                            break;
                        case 3:
                            Console.Write("Введите название книги для возврата: ");
                            string returnTitle = Console.ReadLine();
                            library.ReturnBook(returnTitle, currentUser);
                            break;
                        case 4:
                            Console.WriteLine("Ваши книги:");
                            foreach (var book in currentUser.BorrowedBooks)
                            {
                                Console.WriteLine(book);
                            }
                            break;
                        case 5:
                            library.SaveData();
                            return;
                        default:
                            Console.WriteLine("Неверный выбор.");
                            break;
                    }
                }
            }
        }
    }
}
